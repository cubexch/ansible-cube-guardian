---
# tasks file for guardian_vault_config

- name: Install python pip
  ansible.builtin.apt:
    name:
      - python3-pip
    cache_valid_time: 14400 # 4hrs
  when:
    - ansible_facts['distribution'] == 'Ubuntu'
    - ansible_facts['distribution_version'] == '20.04'
  tags:
    - install_prereqs

- name: Install hvac pip lib
  ansible.builtin.pip:
    name:
      - hvac
  when:
    - ansible_facts['distribution'] == 'Ubuntu'
    - ansible_facts['distribution_version'] == '20.04'
  tags:
    - install_prereqs

- name: Install python-hvac library
  ansible.builtin.apt:
    name: python3-hvac
    state: present
    cache_valid_time: 14400 # 4hrs
  when:
    - ansible_facts['distribution'] == 'Ubuntu'
    - ansible_facts['distribution_version'] == '24.04'
  tags:
    - install_prereqs

- name: Create Vault Config Dir
  ansible.builtin.file:
    dest: "{{ item }}"
    state: directory
    owner: "root"
    group: "root"
    mode: "u+rw,go=-"
  with_items:
    - "{{ cube_vault_configs_dir }}"
  tags:
    - generate_policy
  when:
    - vault_policy_generate | default('true') | bool == true

- name: Copy Vault CA Cert (Local to Remote)
  ansible.builtin.copy:
    src: "{{ self_signed_certs_local_dir }}/{{ vault_cluster_fqdn }}/{{ self_signed_cert_files.ca_cert }}"
    dest: "{{ cube_vault_configs_dir }}/{{ self_signed_cert_files.ca_cert }}"
    owner: "root"
    group: "root"
    mode: u=rw,g=r,o=-
  when:
    - self_signed_cert_files is defined and self_signed_cert_files.ca_cert is defined
  tags:
    - molecule-notest

- name: Gather network facts
  ansible.builtin.setup:
    gather_subset:
      - default_ipv4

- name: Gather network facts from hashicorp_vault_cluster_group_name
  ansible.builtin.setup:
    gather_subset:
      - all_ipv4_addresses
  delegate_facts: true
  delegate_to: "{{ item }}"
  with_items:
    - "{{ groups[hashicorp_vault_cluster_group_name] }}"

- name: Add /etc/hosts entries for vault servers
  ansible.builtin.lineinfile:
    path: "/etc/hosts"
    regexp: "^{{ hostvars[item]['ansible_' ~ hashicorp_vault_interface_api_interface]['ipv4']['address'] }} {{ hostvars[item]['inventory_hostname'] }}.{{ vault_cluster_fqdn }}$"
    line: "{{ hostvars[item]['ansible_' ~ hashicorp_vault_interface_api_interface]['ipv4']['address'] }} {{ hostvars[item]['inventory_hostname'] }}.{{ vault_cluster_fqdn }}"
    state: "present"
    owner: "root"
    group: "root"
  with_items:
    - "{{ groups[hashicorp_vault_cluster_group_name] }}"
  when: create_etc_hosts_entries | default(false) | bool == true

- name: Load vault_init_data
  no_log: true
  ansible.builtin.include_vars:
    file: "{{ hashicorp_vault_init_data_local_dir }}/hashicorp_vault_init_data.ansible_vault.yml"
    name: "loaded_vault_init_data"

- name: Generate Vault Policy Templates - Guardian Readers
  ansible.builtin.template:
    src: "vault.guardian.instance.reader.policy.hcl.j2"
    dest: "{{ cube_vault_configs_dir }}/vault.guardian.{{ item.guardian_hostname }}.reader.policy.hcl"
    owner: "root"
    group: "root"
    mode: u=rw,go=-
  with_items:
    - "{{ guardian_instances }}"
  tags:
    - generate_policy
  when:
    - vault_policy_generate | default('true') | bool == true

- name: Get Policy File Contents - Guardian Readers
  ansible.builtin.slurp:
    src: "{{ cube_vault_configs_dir }}/vault.guardian.{{ item.guardian_hostname }}.reader.policy.hcl"
  with_items:
    - "{{ guardian_instances }}"
  register: vault_policies_guardian_readers
  tags:
    - guardian_readers
  when:
    - vault_policy_deploy | default('false') | bool == true

- name: Write Policies to Vault - Guardian Readers
  no_log: true
  community.hashi_vault.vault_write:
    url: "{{ vault_url }}"
    path: "sys/policies/acl/vault.guardian.{{ item.item.guardian_id }}.reader.policy"
    data:
      policy: "{{ item.content }}"
    auth_method: "token"
    token: "{{ loaded_vault_init_data.root_token }}"
    ca_cert: "{{ vault_ca_cert_path }}"
  with_items:
    - "{{ vault_policies_guardian_readers.results }}"
  tags:
    - guardian_readers
  when:
    - vault_policy_deploy | default('false') | bool == true

- name: Generate Vault Policy Templates - Guardian Writers
  ansible.builtin.template:
    src: "vault.guardian.instance.writer.policy.hcl.j2"
    dest: "{{ cube_vault_configs_dir }}/vault.guardian.{{ item.guardian_hostname }}.writer.policy.hcl"
    owner: "root"
    group: "root"
    mode: u=rw,go=-
  with_items:
    - "{{ guardian_instances }}"
  tags:
    - generate_policy
  when:
    - vault_policy_generate | default('true') | bool == true

- name: Get Policy File Contents - Guardian Writers
  ansible.builtin.slurp:
    src: "{{ cube_vault_configs_dir }}/vault.guardian.{{ item.guardian_hostname }}.writer.policy.hcl"
  with_items:
    - "{{ guardian_instances }}"
  register: vault_policies_guardian_writers
  tags:
    - guardian_writers
  when:
    - vault_policy_deploy | default('false') | bool == true

- name: Write Policies to Vault - Guardian Writers
  no_log: true
  community.hashi_vault.vault_write:
    url: "{{ vault_url }}"
    path: "sys/policies/acl/vault.guardian.{{ item.item.guardian_id }}.writer.policy"
    data:
      policy: "{{ item.content }}"
    auth_method: "token"
    token: "{{ loaded_vault_init_data.root_token }}"
    ca_cert: "{{ vault_ca_cert_path }}"
  with_items:
    - "{{ vault_policies_guardian_writers.results }}"
  tags:
    - guardian_writers
  when:
    - vault_policy_deploy | default('false') | bool == true

- name: Generate Vault Policy Templates - Monitor Readers
  ansible.builtin.template:
    src: "vault.monitor.instance.reader.policy.hcl.j2"
    dest: "{{ cube_vault_configs_dir }}/vault.monitor.{{ item.guardian_hostname }}.reader.policy.hcl"
    owner: "root"
    group: "root"
    mode: u=rw,go=-
  with_items:
    - "{{ monitor_instances }}"
  tags:
    - generate_policy
  when:
    - monitor_instances is defined
    - vault_policy_generate | default('true') | bool == true

- name: Get Policy File Contents - Monitor Readers
  ansible.builtin.slurp:
    src: "{{ cube_vault_configs_dir }}/vault.monitor.{{ item.guardian_hostname }}.reader.policy.hcl"
  with_items:
    - "{{ monitor_instances }}"
  register: vault_policies_monitor_readers
  when:
    - monitor_instances is defined
    - vault_policy_deploy | default('false') | bool == true
  tags:
    - monitor_readers

- name: Write Policies to Vault - Monitor Readers
  no_log: true
  community.hashi_vault.vault_write:
    url: "{{ vault_url }}"
    path: "sys/policies/acl/vault.monitor.{{ item.item.guardian_id }}.reader.policy"
    data:
      policy: "{{ item.content }}"
    auth_method: "token"
    token: "{{ loaded_vault_init_data.root_token }}"
    ca_cert: "{{ vault_ca_cert_path }}"
  with_items:
    - "{{ vault_policies_monitor_readers.results }}"
  when:
    - monitor_instances is defined
    - vault_policy_deploy | default('false') | bool == true
  tags:
    - monitor_readers

- name: Generate Vault Policy Templates - Monitor Writers
  ansible.builtin.template:
    src: "vault.monitor.instance.writer.policy.hcl.j2"
    dest: "{{ cube_vault_configs_dir }}/vault.monitor.{{ item.guardian_hostname }}.writer.policy.hcl"
    owner: "root"
    group: "root"
    mode: u=rw,go=-
  with_items:
    - "{{ monitor_instances }}"
  tags:
    - generate_policy
  when:
    - monitor_instances is defined
    - vault_policy_generate | default('true') | bool == true

- name: Get Policy File Contents - Monitor Writers
  ansible.builtin.slurp:
    src: "{{ cube_vault_configs_dir }}/vault.monitor.{{ item.guardian_hostname }}.writer.policy.hcl"
  with_items:
    - "{{ monitor_instances }}"
  register: vault_policies_monitor_writers
  when:
    - monitor_instances is defined
    - vault_policy_deploy | default('false') | bool == true
  tags:
    - monitor_writers

- name: Write Policies to Vault - Monitor Writers
  no_log: true
  community.hashi_vault.vault_write:
    url: "{{ vault_url }}"
    path: "sys/policies/acl/vault.monitor.{{ item.item.guardian_id }}.writer.policy"
    data:
      policy: "{{ item.content }}"
    auth_method: "token"
    token: "{{ loaded_vault_init_data.root_token }}"
    ca_cert: "{{ vault_ca_cert_path }}"
  with_items:
    - "{{ vault_policies_monitor_writers.results }}"
  when:
    - monitor_instances is defined
    - vault_policy_deploy | default('false') | bool == true
  tags:
    - monitor_writers

- name: Enable Secrets Engine - Guardian
  no_log: true
  community.hashi_vault.vault_write:
    url: "{{ vault_url }}"
    path: "sys/mounts/{{ guardian_secret_mount_path_prefix }}/guardian-{{ item.guardian_id }}"
    data:
      type: 'kv'
      description: 'Cube Exchange Secrets Engine - Guardian'
      options:
        version: 2
    auth_method: "token"
    token: "{{ loaded_vault_init_data.root_token }}"
    ca_cert: "{{ vault_ca_cert_path }}"
  with_items:
    - "{{ guardian_instances }}"
  tags:
    - enable_secrets_engine
  ignore_errors: true # TODO: Check for existence before enabling, it causes an exception if path already exists.
  when:
    - vault_secrets_engine_deploy | default('false') | bool == true

- name: Make sure Check-and-Set (cas) is enabled for secrets engine - Guardian
  community.hashi_vault.vault_write:
    url: "{{ vault_url }}"
    path: "{{ guardian_secret_mount_path_prefix }}/guardian-{{ item.guardian_id }}/config"
    data:
      max_versions: 0
      cas_required: true
      delete_version_after: '0s'
    auth_method: "token"
    token: "{{ loaded_vault_init_data.root_token }}"
    ca_cert: "{{ vault_ca_cert_path }}"
  with_items:
    - "{{ guardian_instances }}"
  tags:
    - enable_secrets_engine
  when:
    - vault_secrets_engine_deploy | default('false') | bool == true

- name: Enable Secrets Engine - Monitor
  no_log: true
  community.hashi_vault.vault_write:
    url: "{{ vault_url }}"
    path: "sys/mounts/{{ monitor_secret_mount_path_prefix }}/monitor-{{ item.guardian_id }}"
    data:
      type: 'kv'
      description: 'Cube Exchange Secrets Engine - Monitor'
      options:
        version: 2
    auth_method: "token"
    token: "{{ loaded_vault_init_data.root_token }}"
    ca_cert: "{{ vault_ca_cert_path }}"
  with_items:
    - "{{ monitor_instances }}"
  tags:
    - enable_secrets_engine
  when:
    - monitor_instances is defined
    - vault_secrets_engine_deploy | default('false') | bool == true
  ignore_errors: true # TODO: Check for existence before enabling, it causes an exception if path already exists.

- name: Make sure Check-and-Set (cas) is enabled for secrets engine - Monitor
  community.hashi_vault.vault_write:
    url: "{{ vault_url }}"
    path: "{{ monitor_secret_mount_path_prefix }}/monitor-{{ item.guardian_id }}/config"
    data:
      max_versions: 0
      cas_required: true
      delete_version_after: '0s'
    auth_method: "token"
    token: "{{ loaded_vault_init_data.root_token }}"
    ca_cert: "{{ vault_ca_cert_path }}"
  with_items:
    - "{{ monitor_instances }}"
  tags:
    - enable_secrets_engine
  when:
    - monitor_instances is defined
    - vault_secrets_engine_deploy | default('false') | bool == true

- name: Enable AppRole Authentication
  no_log: true
  community.hashi_vault.vault_write:
    url: "{{ vault_url }}"
    path: "sys/auth/approle"
    data:
      type: 'approle'
      description: 'Cube Exchange AppRole'
      config:
        default_lease_ttl: '0s'
        max_lease_ttl: '0s'
    auth_method: "token"
    token: "{{ loaded_vault_init_data.root_token }}"
    ca_cert: "{{ vault_ca_cert_path }}"
  ignore_errors: true # TODO: Check for existence before enabling, it causes an exception if path already exists.
  tags:
    - create_approle
  when:
    - vault_approle_enable | default('false') | bool == true

- name: Create AppRole Role - Guardian Reader
  no_log: true
  community.hashi_vault.vault_write:
    url: "{{ vault_url }}"
    path: "auth/approle/role/cube-guardian-{{ item.guardian_id }}.reader"
    data:
      secret_id_bound_cidrs: "{{ guardian_secret_id_bound_cidrs }}"
      token_bound_cidrs: "{{ guardian_token_bound_cidrs }}"
      token_policies: "vault.guardian.{{ item.guardian_id }}.reader.policy"
      token_ttl: "{{ guardian_token_ttl }}"
    auth_method: "token"
    token: "{{ loaded_vault_init_data.root_token }}"
    ca_cert: "{{ vault_ca_cert_path }}"
  with_items:
    - "{{ guardian_instances }}"
  ignore_errors: true # TODO: Check for existence before enabling, it causes an exception if path already exists.
  tags:
    - create_approle
  when:
    - vault_approle_enable | default('false') | bool == true

- name: Create AppRole Role - Guardian Writer
  no_log: true
  community.hashi_vault.vault_write:
    url: "{{ vault_url }}"
    path: "auth/approle/role/cube-guardian-{{ item.guardian_id }}.writer"
    data:
      secret_id_bound_cidrs: "{{ guardian_secret_id_bound_cidrs }}"
      token_bound_cidrs: "{{ guardian_token_bound_cidrs }}"
      token_policies: "vault.guardian.{{ item.guardian_id }}.writer.policy"
      token_ttl: "{{ guardian_token_ttl }}"
    auth_method: "token"
    token: "{{ loaded_vault_init_data.root_token }}"
    ca_cert: "{{ vault_ca_cert_path }}"
  with_items:
    - "{{ guardian_instances }}"
  ignore_errors: true # TODO: Check for existence before enabling, it causes an exception if path already exists.
  tags:
    - create_approle
  when:
    - vault_approle_enable | default('false') | bool == true

- name: Create AppRole Role - Monitor Reader
  no_log: true
  community.hashi_vault.vault_write:
    url: "{{ vault_url }}"
    path: "auth/approle/role/cube-monitor-{{ item.guardian_id }}.reader"
    data:
      secret_id_bound_cidrs: "{{ monitor_secret_id_bound_cidrs }}"
      token_bound_cidrs: "{{ monitor_token_bound_cidrs }}"
      token_policies: "vault.monitor.{{ item.guardian_id }}.reader.policy"
      token_ttl: "{{ monitor_token_ttl }}"
    auth_method: "token"
    token: "{{ loaded_vault_init_data.root_token }}"
    ca_cert: "{{ vault_ca_cert_path }}"
  with_items:
    - "{{ monitor_instances }}"
  when:
    - monitor_instances is defined
    - vault_approle_enable | default('false') | bool == true
  ignore_errors: true # TODO: Check for existence before enabling, it causes an exception if path already exists.
  tags:
    - create_approle

- name: Create AppRole Role - Monitor Writer
  no_log: true
  community.hashi_vault.vault_write:
    url: "{{ vault_url }}"
    path: "auth/approle/role/cube-monitor-{{ item.guardian_id }}.writer"
    data:
      secret_id_bound_cidrs: "{{ monitor_secret_id_bound_cidrs }}"
      token_bound_cidrs: "{{ monitor_token_bound_cidrs }}"
      token_policies: "vault.monitor.{{ item.guardian_id }}.writer.policy"
      token_ttl: "{{ monitor_token_ttl }}"
    auth_method: "token"
    token: "{{ loaded_vault_init_data.root_token }}"
    ca_cert: "{{ vault_ca_cert_path }}"
  with_items:
    - "{{ monitor_instances }}"
  when:
    - monitor_instances is defined
    - vault_approle_enable | default('false') | bool == true
  ignore_errors: true # TODO: Check for existence before enabling, it causes an exception if path already exists.
  tags:
    - create_approle

- name: Get AppRole Credentials - Guardian
  no_log: true
  ansible.builtin.include_tasks: get_approles_guardian.yml
  with_items:
    - "{{ guardian_instances }}"
  tags:
    - retrieve_approle
  when:
    - vault_approle_retrieve | default('false') | bool == true

- name: Get AppRole Credentials - Monitor
  no_log: true
  ansible.builtin.include_tasks: get_approles_monitor.yml
  with_items:
    - "{{ monitor_instances }}"
  when:
    - monitor_instances is defined
    - vault_approle_retrieve | default('false') | bool == true
  tags:
    - retrieve_approle

- name: Write Fee Payer - Cubenet
  no_log: true
  community.hashi_vault.vault_kv2_write:
    url: "{{ vault_url }}"
    engine_mount_point: "{{ monitor_secret_mount_path_prefix }}/monitor-{{ item.guardian_id }}"
    path: fee-payer/cube-aurum
    data:
      value: "{{ monitor_fee_payer_cubenet | string }}"
    auth_method: "token"
    token: "{{ loaded_vault_init_data.root_token }}"
    ca_cert: "{{ vault_ca_cert_path }}"
  with_items:
    - "{{ monitor_instances }}"
  when:
    - monitor_instances is defined
  ignore_errors: true # TODO: Check for existence before enabling, it causes an exception if path already exists.
  tags:
    - write_fee_payers

- name: Write Fee Payer - BTC
  no_log: true
  community.hashi_vault.vault_kv2_write:
    url: "{{ vault_url }}"
    engine_mount_point: "{{ monitor_secret_mount_path_prefix }}/monitor-{{ item.guardian_id }}"
    path: fee-payer/btc
    data:
      value: '{{ monitor_fee_payer_btc }}'
    auth_method: "token"
    token: "{{ loaded_vault_init_data.root_token }}"
    ca_cert: "{{ vault_ca_cert_path }}"
  with_items:
    - "{{ monitor_instances }}"
  when:
    - monitor_instances is defined
  ignore_errors: true # TODO: Check for existence before enabling, it causes an exception if path already exists.
  tags:
    - write_fee_payers

- name: Write Fee Payer - ETH
  no_log: true
  community.hashi_vault.vault_kv2_write:
    url: "{{ vault_url }}"
    engine_mount_point: "{{ monitor_secret_mount_path_prefix }}/monitor-{{ item.guardian_id }}"
    path: fee-payer/eth
    data:
      value: '{{ monitor_fee_payer_eth }}'
    auth_method: "token"
    token: "{{ loaded_vault_init_data.root_token }}"
    ca_cert: "{{ vault_ca_cert_path }}"
  with_items:
    - "{{ monitor_instances }}"
  when:
    - monitor_instances is defined
  ignore_errors: true # TODO: Check for existence before enabling, it causes an exception if path already exists.
  tags:
    - write_fee_payers
